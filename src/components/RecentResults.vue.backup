<template>
  <div class="recent-results-section">
    <div v-if="loading" class="loading">Loading recent results...</div>
    <div v-if="error" class="error">Error loading results: {{ error?.message }}</div>
    <div v-if="!loading && !error && recentResults.length > 0" class="results-table-container">
      <table class="results-table">
        <thead>
          <tr :style="{ backgroundColor: primaryColor }">
            <th>Opponent</th>
            <th>Date</th>
            <th>Location</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="result in recentResults" :key="result.game_id">
            <td class="opponent-cell">
              <img
                src="/images/default-logo.png"
                :alt="result.opponent_name + ' Logo'"
                class="school-logo"
                @error="(event: Event) => { 
                  const target = event.target as HTMLImageElement;
                  if (target) {
                    target.src = '/images/default-logo.png';
                  }
                }"
              />
              <span class="opponent-name">{{ result.opponent_name }}</span>
            </td>
            <td>{{ formatDate(result.game_date) }}</td>
            <td>{{ getLocationText(result) }}</td>
            <td :class="{ 
              'win': result.game_outcome === 'W', 
              'loss': result.game_outcome === 'L',
              'tie': result.game_outcome === 'T'
            }">
              {{ formatGameResult(result) }}
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <p v-if="!loading && !error && recentResults.length === 0" class="no-results">
      No recent results found for {{ props.subscribedTeams.join(', ') }}.
    </p>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, defineProps, watch } from 'vue';
import { getRecentGames, getCurrentTeam, type Game } from '../services/api';
import { themeColors } from '../services/theme';
import { debug, createDebugContext, handleComponentError } from '../utils/debug';
</template>

<script setup lang="ts">
import { ref, onMounted, defineProps } from 'vue';
import { getRecentGames, getCurrentTeam, type Game } from '../services/api';
import { themeColors } from '../services/theme';

const recentResults = ref<Game[]>([]);
const loading = ref(true);
const error = ref<Error | null>(null);
const limit = 10;

// Receive subscribedTeams and primaryColor props
const props = defineProps({
  subscribedTeams: {
    type: Array as () => string[],
    required: true,
    default: () => []
  },
  primaryColor: {
    type: String,
    default: '#007bff'
  }
});

onMounted(async () => {
  loading.value = true;
  error.value = null;
  
  try {
    console.log('[RecentResults] Fetching recent games...');
    const currentTeam = getCurrentTeam();
    console.log('[RecentResults] Current team:', currentTeam);
    
    // Get recent games from the new API
    const games = await getRecentGames(currentTeam);
    console.log('[RecentResults] Recent games:', games);
    
    recentResults.value = games.slice(0, limit);
    console.log('[RecentResults] Final recent results:', recentResults.value);
    
  } catch (err) {
    error.value = err as Error;
    console.error('[RecentResults] Error fetching recent results:', err);
  } finally {
    loading.value = false;
    console.log('[RecentResults] Loading complete, state:', { 
      loading: loading.value,
      error: error.value,
      resultsCount: recentResults.value.length 
    });
  }
});

function formatDate(dateString: string): string {
  const options: Intl.DateTimeFormatOptions = { 
    month: 'short', 
    day: 'numeric', 
    year: 'numeric' 
  };
  return new Date(dateString).toLocaleDateString('en-US', options);
}

function formatGameResult(game: Game): string {
  if (!game.game_outcome) return 'TBD';
  
  let result = game.game_outcome;
  
  // Add score if available
  if (game.team_score !== undefined && game.opponent_score !== undefined) {
    result += ` ${game.team_score}-${game.opponent_score}`;
  }
  
  return result;
}

function getLocationText(game: Game): string {
  return game.home_away === 'Home' ? 'Home' : `@ ${game.opponent_name}`;
}
</script>

<style scoped>
.recent-results-section {
  text-align: center;
  width: 100%;
  box-sizing: border-box;
  padding: 1rem;
  background-color: transparent;
  border-radius: 8px;
  color: white;
}

.loading, .error, .no-results {
  color: white;
  font-family: 'Bebas Neue', sans-serif;
  font-size: 1.2em;
  text-align: center;
  padding: 2rem;
}

.results-table-container {
  overflow-x: auto;
  margin-top: 1rem;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.results-table {
  width: 100%;
  border-collapse: collapse;
  background-color: rgba(24, 43, 73, 0.7);
  color: white;
  border-radius: 8px;
  overflow: hidden;
  min-width: 500px;
}

.results-table th,
.results-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.results-table th {
  color: white;
  font-weight: 600;
  background-color: var(--primary-color, #182B49);
  font-family: 'Bebas Neue', sans-serif;
  letter-spacing: 1px;
}

.opponent-cell {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.school-logo {
  width: 30px;
  height: 30px;
  object-fit: contain;
  border-radius: 4px;
  background: rgba(255, 255, 255, 0.1);
  padding: 2px;
}

.opponent-name {
  font-weight: 500;
}

.win {
  color: #4CAF50;
  font-weight: 600;
}

.loss {
  color: #f44336;
  font-weight: 600;
}

.tie {
  color: #ff9800;
  font-weight: 600;
}

@media (max-width: 768px) {
  .results-table th,
  .results-table td {
    padding: 8px;
    font-size: 14px;
  }

  .school-logo {
    width: 24px;
    height: 24px;
  }
  
  .opponent-name {
    font-size: 13px;
  }
}

@media (max-width: 480px) {
  .results-table {
    min-width: 400px;
  }
  
  .results-table th,
  .results-table td {
    padding: 6px;
    font-size: 12px;
  }
  
  .school-logo {
    width: 20px;
    height: 20px;
  }
}
</style>
