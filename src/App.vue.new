<template>
  <div class="app-container">
    <!-- Error Boundary -->
    <div v-if="hasError" class="error-boundary">
      <h2>An error occurred while loading the application:</h2>
      <p>{{ errorMessage }}</p>
      <button @click="resetError" class="retry-button">Try Again</button>
    </div>
    
    <!-- Main App Content -->
    <template v-else>
      <OnboardingFlow 
        v-if="!isOnboardingComplete" 
        @onboarding-complete="completeOnboarding"
        :isVisible="true"
        :default-university="defaultUniversity"
      />
      <template v-else>
        <Dashboard 
          v-if="isOnboardingComplete"
          :team-data="teamData"
        />
        <FabNavigation 
          :team-logo-url="teamData.logo_url"
          :team-name="teamData.name"
        />
      </template>
    </template>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';
import FabNavigation from './components/FabNavigation.vue'
import OnboardingFlow from './components/onboarding/OnboardingFlow.vue'
import Dashboard from './components/Dashboard.vue'
import { type TeamData, getTeamData, cacheTeamData, getCachedTeamData } from './services/api';

interface UniversityData {
  name: string;
  logo: string;
}

// App state
const isOnboardingComplete = ref(false);
const hasError = ref(false);
const errorMessage = ref('');
const teamData = ref<TeamData>({
  name: 'UCSD Baseball',
  logo_url: '/images/ucsd-trident.svg'
});

const defaultUniversity: UniversityData = {
  name: 'UCSD Baseball',
  logo: '/images/ucsd-trident.svg'
};

// Error handling
const handleError = (error: Error) => {
  console.error('[App] Error caught:', error);
  hasError.value = true;
  errorMessage.value = error.message || 'An unknown error occurred';
};

const resetError = async () => {
  console.debug('[App] Resetting error state');
  hasError.value = false;
  errorMessage.value = '';
  
  // Retry initialization
  await initializeApp();
};

// App initialization
const initializeApp = async () => {
  console.debug('[App] Initializing app');
  try {
    const completed = localStorage.getItem('onboardingComplete');
    if (completed === 'true') {
      console.debug('[App] Onboarding complete, loading team data');
      isOnboardingComplete.value = true;
      
      const cachedData = getCachedTeamData();
      if (cachedData) {
        console.debug('[App] Using cached team data:', cachedData);
        teamData.value = cachedData;
      }

      const freshData = await getTeamData();
      if (freshData) {
        console.debug('[App] Updated with fresh team data:', freshData);
        teamData.value = freshData;
        cacheTeamData(freshData);
      }
    } else {
      console.debug('[App] Showing onboarding flow');
    }
  } catch (error) {
    handleError(error instanceof Error ? error : new Error('Failed to initialize app'));
  }
};

// Onboarding completion handler
const completeOnboarding = async (data: { sports: string[] }) => {
  console.debug('[App] Completing onboarding with data:', data);
  try {
    const newTeamData = await getTeamData(data.sports?.[0]);
    teamData.value = newTeamData;
    isOnboardingComplete.value = true;
    localStorage.setItem('onboardingComplete', 'true');
    cacheTeamData(newTeamData);
    console.debug('[App] Onboarding completed successfully');
  } catch (error) {
    handleError(error instanceof Error ? error : new Error('Failed to complete onboarding'));
  }
};

// Initialize app on mount
onMounted(async () => {
  console.debug('[App] Component mounted');
  await initializeApp();
});
</script>

<style>
@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');

:root {
  --ucsd-blue: #00629B;
  --ucsd-gold: #FFCD00;
}

.app-container {
  width: 100%;
  min-height: 100vh;
  background-color: #f5f5f5;
  font-family: Inter, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Error boundary styles */
.error-boundary {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #f8f9fa;
  padding: 2rem;
  text-align: center;
  z-index: 9999;
}

.error-boundary h2 {
  color: #dc3545;
  margin-bottom: 1rem;
  font-family: 'Bebas Neue', sans-serif;
}

.error-boundary p {
  color: #6c757d;
  margin-bottom: 2rem;
  max-width: 600px;
  white-space: pre-wrap;
}

.retry-button {
  padding: 0.75rem 2rem;
  font-size: 1rem;
  font-weight: bold;
  color: white;
  background-color: var(--ucsd-blue);
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.retry-button:hover {
  background-color: #004b76;
}

/* Transition animations */
.slide-enter-active,
.slide-leave-active {
  transition: all 0.3s ease;
}

.slide-enter-from {
  opacity: 0;
  transform: translateX(30px);
}

.slide-leave-to {
  opacity: 0;
  transform: translateX(-30px);
}

/* Fade animations */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
</style>
